// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // optional: shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/* ---------- ENUMS ---------- */
enum Position {
  GK
  OUT
}

enum PlayerStatus {
  A
  I
}

/* ---------- MODELS ---------- */

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String

  teams         Team[]
  leaguesOwned  League[]       @relation("LeagueOwner")
  memberships   LeagueMember[]
}

model League {
  id         String        @id @default(cuid())
  name       String
  inviteCode String        @unique

  ownerId    String
  owner      User          @relation("LeagueOwner", fields: [ownerId], references: [id])

  teams      Team[]
  members    LeagueMember[]
}

model LeagueMember {
  id       String  @id @default(cuid())

  userId   String
  leagueId String
  role     String

  user     User    @relation(fields: [userId], references: [id])
  league   League  @relation(fields: [leagueId], references: [id])

  @@unique([leagueId, userId])
}

model Team {
  id        String     @id @default(cuid())
  name      String

  userId    String
  user      User       @relation(fields: [userId], references: [id])

  leagueId  String
  league    League     @relation(fields: [leagueId], references: [id])

  budget    Float      @default(34)

  slots           SquadSlot[]
  gameweekScores  GameweekScore[]

  @@unique([userId, leagueId]) // âœ… add this line
}


model Player {
  id          String        @id @default(cuid())
  name        String
  teamName    String
  position    Position
  price       Float
  status      PlayerStatus

  ownedPct    Float?
  nextFixture String?
  totalPoints Int?
  roundPoints Int?
  goals       Int?
  assists     Int?
  cleanSheets Int?

  slots       SquadSlot[]
  events      ScoreEvent[]

  @@unique([name, teamName])
}

model SquadSlot {
  id        String  @id @default(cuid())

  teamId    String
  team      Team    @relation(fields: [teamId], references: [id])

  playerId  String?
  player    Player? @relation(fields: [playerId], references: [id])

  slotLabel String

  @@unique([teamId, slotLabel])
}

model Fixture {
  id        String   @id @default(cuid())
  homeTeam  String
  awayTeam  String
  kickoffAt DateTime
  gw        Int

  events    ScoreEvent[]
}

model ScoreEvent {
  id        String   @id @default(cuid())
  fixtureId String
  fixture   Fixture  @relation(fields: [fixtureId], references: [id])

  playerId  String
  player    Player   @relation(fields: [playerId], references: [id])

  type      String   // "goal" | "assist" | "appearance"
  value     Int
}

model GameweekScore {
  id        String @id @default(cuid())

  teamId    String
  team      Team   @relation(fields: [teamId], references: [id])

  gw        Int
  total     Int

  @@unique([teamId, gw])
}
